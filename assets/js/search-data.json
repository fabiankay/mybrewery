{
  
    
        "post0": {
            "title": "Requirements",
            "content": "Requirements . Functional Requirements . The application must be able to plan the brewing process. The user must be able to select the type of beer he/she wants to brew. | The user must be able to select the amount of grains he/she wants to use. | The user must be able to select the amount of water he/she wants to use. | The user must be able to select the amount of yeast he/she wants to use. | The user must be able to select the amount of hops he/she wants to use. | The user must be able to select the amount of time he/she wants to spend brewing. | The user must be able to specify each ingredient’s quantity. | The user must be able to define the different steps of the brewing process and the time each step takes. | The user must be able to add a note to the brewing process. | The user must be able to save the brewing process. | The user must be able to load a previously saved brewing process. | The user should be able to see a list of all saved brewing processes. | The user should be able to delete a previously saved brewing process. | The user should be able to specify the name of the beer. | The user should be able to specify the type of malt used. | The user should be able to specify the type of hops used. | . | The application must be able to monitor the brewing process. The user must be able to see the current step of the brewing process. | The user must be able to see the remaining time for the current step of the brewing process. | The user must be able to see the current temperature of the brewing process. | The user should be able to see the amount of ingredients needed for the current step. | The user should be able to see the next step of the brewing process. | The user should be able to see the amount of ingredients needed for the next step. | . | The application must be able to document the brewing process. The application must store all the information collected during the brewing process. | The collected data must be available for every brewing process. | The user must be able to add comments for each step. | The user should be able to comment or add tasting notes. | The user should be able to rate the beer after the brewing. | . | . Technological Requirements . The collected data must be stored accessible and persistent. | Edge sensors (f.e. temperature sensors) must be integrated so they can be exchanged or extended easily. | Users must authenticate before using the application. | The application should provide users the option to share their brewing processes publicly or privately. | . Quality of Service . The application must be available through all common internet browsers in their latest version. | The application should be available on tablet devices. | . User Interface Requirements . The temperature data should be available as line chart. | The user must be able to access and see the data collected during the brewing process in a human readable way. | The application should be responsive and optimized for tablet usage. | The application could have a dark mode (because everything cool should have a dark mode ;) ). | . Legal and contractual Requirements . The application must support measurement units for the following: Liquid volume in liters | Weight in kilograms | Temperature in degrees Celsius | Time in minutes | Gravity in SG | . | The application must be available in english. | The application should be available in german. | . Changes of requirements . Requirements can change rapidly. Therefore, having a plan how to deal with changes is essential for ongoing success. To effectively deal with changing requirements, it helps to classify and document changes regardless of their “size”. For this project I propose categorizing any changing requirements by the following factors: . severity (high, medium, low) | source (internal, external) | effect (effected part of the software) | reason/description (for documentation) | result/decision (add, adapt, remove) | . Depending on the classification of changing requirement, different processes should be applied. For severe external as well as external changes the project team should decide how to incorporate the change immediately. For less severe changes the team should decide after the current iteration. For non severe changes individuals or the team in charge of the effected part of the application may decide. .",
            "url": "https://fabiankay.github.io/mybrewery/requirements/2022/05/29/requirements.html",
            "relUrl": "/requirements/2022/05/29/requirements.html",
            "date": " • May 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Brewing 101",
            "content": "How does brewing work? . To better understand the application and the requirements it aims to address, the following secion will briefly walk you through the brewing process and important parameters during each step. . 1. Preparation After carefully cleaning the equipment (a kattle, a large spoon, pipes and valves, …) it is time to weight the grains. For brewing we use crushed malt of different types. . 2. Mash In The grains are first mashed in a large bowl. Water is heated to a certain temperature and the grains are added to the water. It is important to keep the water at a specific temperature during the mash in process. The water temperature should be monitored and the water should be heated again if necessary. The water is then filtered to remove the impuritys. . 3. Sparge water Additional water is added and drained through the mash tun. . 4. Boil After the mash out the water is heated until it is boiling. The water should boil for an exact amount of time between 60 and 90 minutes. At certain points in time we add hops to the water. Depending on the type of beer we add different hops at different points in time. . 5. Fermentation Fermentation is the process of converting the young beer into alcohol. By adding yeast to the filtered young beer after boiling in step 4, the remaining sugar is converted into alcohol. Now we let the young beer rest until it is ready to be filled into bottles. The right time to fill the bottles is reached when the remaining sugar is at a certain level (again depending on the type of beer). . 6. Bottling Before botteling we add glucose to the fermented beer. We fill the beer to bottles and we label them with the name of the beer. After another 1-4 weeks the beer is ready to be consumed. . 7. Enjoy :) . Important parameters . Temerature | Time | Measurements (water, malt, hops, yeast, …) | Gravity | .",
            "url": "https://fabiankay.github.io/mybrewery/intro/2022/05/28/brewing101.html",
            "relUrl": "/intro/2022/05/28/brewing101.html",
            "date": " • May 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://fabiankay.github.io/mybrewery/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This project is developed by Fabian Kainz. .",
          "url": "https://fabiankay.github.io/mybrewery/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://fabiankay.github.io/mybrewery/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}